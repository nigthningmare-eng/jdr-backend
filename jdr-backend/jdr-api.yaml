openapi: 3.1.0
info:
  title: JDR Narratif Persistant (PNJ + Races + XP/Evolve + Canon)
  version: 1.6.0
servers:
  - url: https://jdr-backend.onrender.com/api
paths:
  /pnjs:
    get:
      operationId: listPnjs
      summary: Liste des PNJ
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PNJ"
    post:
      operationId: createPnj
      summary: Créer un PNJ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PNJ"
      responses:
        "201":
          description: Créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PNJ"
  /pnjs/{id}:
    put:
      operationId: updatePnj
      summary: Mettre à jour un PNJ (respecte les verrous s'ils existent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PNJ"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PNJ"
  /pnjs/{id}/award-xp:
    post:
      operationId: awardXp
      summary: Ajouter de l’XP à un PNJ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                xp:
                  type: integer
                  minimum: 1
              required:
                - xp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PNJ"
  /pnjs/{id}/level-up:
    post:
      operationId: levelUp
      summary: Monter de niveau autant que possible selon l’XP
      responses:
        "200":
          description: Résultat de progression
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LevelUpResult"
  /pnjs/{id}/evolve:
    post:
      operationId: evolve
      summary: Faire évoluer la race d’un PNJ (vérifie conditions)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetRaceId:
                  type: string
                justification:
                  type: string
              required:
                - targetRaceId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PNJ"
        "400":
          description: Conditions non remplies
  /pnjs/{id}/bind-canon:
    post:
      operationId: bindCanon
      summary: Lier un PNJ à un profil canon (canonId)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                canonId:
                  type: string
              required:
                - canonId
      responses:
        "200":
          description: Lié
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PNJ"
  /pnjs/{id}/lock-traits:
    post:
      operationId: lockTraits
      summary: Verrouiller certains champs du PNJ (apparence, traits, skills…)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    type: string
                  example:
                    - appearance
                    - personalityTraits
                    - skills
              required:
                - fields
      responses:
        "200":
          description: Champs verrouillés
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PNJ"
  /pnjs/{id}/consistency:
    get:
      operationId: checkConsistency
      summary: Rapport de cohérence PNJ ↔ profil canon lié
      responses:
        "200":
          description: Rapport
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsistencyReport"
  /races:
    get:
      operationId: listRaces
      summary: Liste des races
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Race"
    post:
      operationId: createRace
      summary: Créer une race
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Race"
      responses:
        "201":
          description: Créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
  /races/{raceId}:
    get:
      operationId: getRace
      summary: Obtenir une race par ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
    put:
      operationId: updateRace
      summary: Mettre à jour une race
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Race"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
    delete:
      operationId: deleteRace
      summary: Supprimer une race
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Race"
  /canon:
    get:
      operationId: listCanonProfiles
      summary: Lister les profils canons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CanonProfile"
    post:
      operationId: createCanonProfile
      summary: Créer un profil canon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CanonProfile"
      responses:
        "201":
          description: Créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanonProfile"
  /canon/{canonId}:
    get:
      operationId: getCanonProfile
      summary: Obtenir un profil canon
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanonProfile"
    put:
      operationId: updateCanonProfile
      summary: Mettre à jour un profil canon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CanonProfile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanonProfile"
    delete:
      operationId: deleteCanonProfile
      summary: Supprimer un profil canon
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanonProfile"
  /story/state:
    get:
      operationId: getStoryState
      summary: Lire l’état d’histoire
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoryState"
    post:
      operationId: updateStoryState
      summary: Mettre à jour l’état d’histoire
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoryState"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoryState"
  /style:
    post:
      operationId: setNarrativeStyle
      summary: Définir le style narratif
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                styleText:
                  type: string
              required:
                - styleText
      responses:
        "200":
          description: OK
  /settings/content:
    post:
      operationId: setContentSettings
      summary: Régler le niveau de maturité (safe/mature/fade)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                explicitLevel:
                  type: string
                  enum:
                    - safe
                    - mature
                    - fade
              required:
                - explicitLevel
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  explicitLevel:
                    type: string
  /generate/scene:
    post:
      operationId: generateScene
      summary: Générer une scène (respecte le niveau de maturité)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
              required:
                - prompt
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  narrativeText:
                    type: string
  /roll:
    post:
      operationId: rollDice
      summary: Jet de dés NdM±K (ex. 1d20+3)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dice:
                  type: string
              required:
                - dice
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: integer
                  rolls:
                    type: array
                    items:
                      type: integer
                  modifier:
                    type: integer
                  formula:
                    type: string
components:
  schemas:
    PNJ:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        personalityTraits:
          type: array
          items:
            type: string
        backstory:
          type: string
        appearance:
          type: string
        raceId:
          type: string
        raceName:
          type: string
        evolutionHistory:
          type: array
          items:
            type: string
        level:
          type: integer
          minimum: 1
          default: 1
        xp:
          type: integer
          minimum: 0
          default: 0
        stats:
          type: object
          properties:
            hp:
              type: integer
            mp:
              type: integer
            strength:
              type: integer
            defense:
              type: integer
            magic:
              type: integer
            speed:
              type: integer
            resistance:
              type: integer
            charisma:
              type: integer
        skills:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              tier:
                type: string
                enum:
                  - Extra
                  - Unique
                  - Ultimate
              effect:
                type: string
        isCanon:
          type: boolean
          default: false
        canonicalSource:
          type: string
        canonId:
          type: string
        lockedTraits:
          type: array
          items:
            type: string
    Race:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        family:
          type: string
        canon:
          type: boolean
        description:
          type: string
        baseStats:
          type: object
          properties:
            hp:
              type: integer
            mp:
              type: integer
            strength:
              type: integer
            defense:
              type: integer
            magic:
              type: integer
            speed:
              type: integer
            resistance:
              type: integer
            charisma:
              type: integer
        evolutionPaths:
          type: array
          items:
            type: object
            properties:
              toRaceId:
                type: string
              minLevel:
                type: integer
              conditions:
                type: array
                items:
                  type: string
    LevelUpResult:
      type: object
      properties:
        oldLevel:
          type: integer
        newLevel:
          type: integer
        xp:
          type: integer
        xpToNext:
          type: integer
        statIncreases:
          type: object
          additionalProperties:
            type: integer
    CanonProfile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: Nom canonique
        franchise:
          type: string
          example: Tensura
        personalityTraits:
          type: array
          items:
            type: string
        appearance:
          type: string
        skills:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              tier:
                type: string
                enum:
                  - Extra
                  - Unique
                  - Ultimate
              effect:
                type: string
        quotes:
          type: array
          items:
            type: string
        notes:
          type: string
        sources:
          type: array
          items:
            type: string
      required:
        - name
    ConsistencyReport:
      type: object
      properties:
        passed:
          type: boolean
        conflicts:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              expected:
                type: string
              found:
                type: string
              severity:
                type: string
                enum:
                  - low
                  - medium
                  - high
        suggestions:
          type: array
          items:
            type: string
    StoryState:
      type: object
      properties:
        currentLocation:
          type: string
        currentZoneId:
          type: string
        charactersInScene:
          type: array
          items:
            type: string
        recentEvents:
          type: array
          items:
            type: string
        discoveredZones:
          type: array
          items:
            type: string
        worldState:
          type: object
          additionalProperties: true









