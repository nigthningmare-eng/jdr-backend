openapi: 3.1.0
info:
  title: JDR Narratif Persistant (Tensura Canon + Dragons & Transcendance)
  description: API JDR pour PNJ, stats, skills, XP/level, évolutions, transcendance (Ultimate), titres (Element Dragon / Dragon Lord), jets de dés et zones.
  version: 1.5.0
servers:
  - url: https://jdr-backend.onrender.com/api
paths:
  /pnjs:
    get:
      operationId: listPnjs
      summary: Liste les PNJ (max 50).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PNJ' }
    post:
      operationId: createPnj
      summary: Crée un PNJ.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PNJ' }
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PNJ' }

  /pnjs/{id}:
    put:
      operationId: updatePnj
      summary: Met à jour un PNJ.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PNJ' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PNJ' }

  # Progression
  /pnjs/{id}/award-xp:
    post:
      operationId: awardXp
      summary: Ajoute de l’XP à un PNJ.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AwardXpRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PNJ' }

  /pnjs/{id}/level-up:
    post:
      operationId: levelUp
      summary: Passe de niveau si l’XP suffit (applique des hausses de stats).
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Résultat
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LevelUpResult' }

  # Évolution raciale
  /pnjs/{id}/evolve:
    post:
      operationId: evolve
      summary: Fait évoluer la race selon un chemin valide (canon/compatible).
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EvolutionRequest' }
      responses:
        '200':
          description: PNJ mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PNJ' }
        '400':
          description: Conditions non remplies

  # Titres & Transcendance
  /pnjs/{id}/grant-title:
    post:
      operationId: grantTitle
      summary: Attribue un titre (ex. Element Dragon, Dragon Lord) à un PNJ.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titleId:
                  type: string
                notes:
                  type: string
              required: [titleId]
      responses:
        '200':
          description: PNJ mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PNJ' }

  /pnjs/{id}/transcend:
    post:
      operationId: applyTranscendence
      summary: Applique une transcendance (Ultimate Slime/Dragon/Vampire/Oni…).
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranscendenceRequest'
      responses:
        '200':
          description: PNJ transcendé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PNJ' }
        '400':
          description: Conditions non remplies

  # Catalogue Races / Evolutions
  /races:
    get:
      operationId: listRaces
      summary: Liste des races (canon/compatibles), y compris hiérarchie de dragons.
      parameters:
        - name: canon
          in: query
          schema: { type: boolean }
        - name: family
          in: query
          schema:
            type: string
            description: Filtre par famille (dragon, slime, vampire, oni, goblin, demon, spirit, humanoid, beast, undead, celestial)
        - name: rank
          in: query
          schema:
            type: string
            description: Rang intra-famille (p. ex. pour dragons)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Race' }

  /races/{raceId}/evolutions:
    get:
      operationId: getRaceEvolutions
      summary: Chemins d’évolution possibles pour une race donnée.
      parameters:
        - name: raceId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/EvolutionPath' }

  # Titres (Element Dragon, Dragon Lord, Unique/Divine…)
  /titles:
    get:
      operationId: listTitles
      summary: Liste les titres disponibles.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Title' }
    post:
      operationId: createTitle
      summary: Crée un nouveau titre.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Title' }
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Title' }

  # Transcendances (Ultimate Slime/Dragon/Vampire/Oni…)
  /transcendences:
    get:
      operationId: listTranscendences
      summary: Liste les types de transcendance disponibles.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Transcendence' }
    post:
      operationId: createTranscendence
      summary: Crée une nouvelle transcendance (fanmade canon-compatible).
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Transcendence' }
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Transcendence' }

  # Story / Style / Scènes
  /story/state:
    get:
      operationId: getStoryState
      summary: Récupère l’état narratif courant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StoryState' }
    post:
      operationId: updateStoryState
      summary: Met à jour l’état narratif courant.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StoryState' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StoryState' }

  /style:
    post:
      operationId: setNarrativeStyle
      summary: Définit le style narratif (texte brut).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                styleText: { type: string }
              required: [styleText]
      responses:
        '200':
          description: OK

  /generate/scene:
    post:
      operationId: generateScene
      summary: Génère une scène en fonction de l’état et du style.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt: { type: string }
              required: [prompt]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  narrativeText: { type: string }

  # Dés
  /roll:
    post:
      operationId: rollDice
      summary: Jet de dés NdM±K (ex. 1d20+3).
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RollRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RollResult' }

  # Zones / Lieux
  /zones:
    get:
      operationId: listZones
      summary: Liste les zones/lieux.
      parameters:
        - name: status
          in: query
          schema: { type: string, enum: [canon, unused, custom] }
        - name: discovered
          in: query
          schema: { type: boolean }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Zone' }
    post:
      operationId: createZone
      summary: Crée une zone/lieu.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Zone' }
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Zone' }

  /zones/{zoneId}:
    get:
      operationId: getZone
      summary: Récupère une zone.
      parameters:
        - name: zoneId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Zone' }
    put:
      operationId: updateZone
      summary: Met à jour une zone.
      parameters:
        - name: zoneId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Zone' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Zone' }

  /zones/{zoneId}/discover:
    post:
      operationId: discoverZone
      summary: Marque la zone comme découverte.
      parameters:
        - name: zoneId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Zone' }

  /zones/{zoneId}/notes:
    post:
      operationId: addZoneNote
      summary: Ajoute une note à une zone.
      parameters:
        - name: zoneId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note: { type: string }
              required: [note]
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema:
                type: object
                properties:
                  noteId: { type: string }
                  note: { type: string }

components:
  schemas:
    PNJ:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        personalityTraits:
          type: array
          items: { type: string }
        backstory: { type: string }
        appearance: { type: string }
        # Race & progression
        raceId: { type: string, description: "Réf. /races" }
        raceName: { type: string }
        evolutionStage: { type: string, description: "Chaîne lisible des étapes traversées" }
        evolutionHistory:
          type: array
          items: { type: string }
        level: { type: integer, minimum: 1, default: 1 }
        xp: { type: integer, minimum: 0, default: 0 }
        xpToNext: { type: integer, minimum: 0 }
        titles:
          type: array
          items: { type: string }
        titleIds:
          type: array
          items: { type: string }
          description: "IDs des titres appliqués (ex. element-dragon, dragon-lord)."
        transcendenceId:
          type: string
          description: "Réf. /transcendences (Ultimate Slime/Dragon/Vampire/Oni…)."
        transcendenceName:
          type: string
        stats:
          type: object
          properties:
            hp: { type: integer, minimum: 0 }
            mp: { type: integer, minimum: 0 }
            strength: { type: integer, minimum: 0 }
            defense: { type: integer, minimum: 0 }
            magic: { type: integer, minimum: 0 }
            speed: { type: integer, minimum: 0 }
            resistance: { type: integer, minimum: 0 }
            charisma: { type: integer, minimum: 0 }
        skills:
          type: array
          items: { $ref: '#/components/schemas/Skill' }
        locationId: { type: string, description: "Zone courante" }
        isCanon: { type: boolean, default: false }

    Skill:
      type: object
      properties:
        name: { type: string, example: "Great Sage" }
        tier: { type: string, enum: [Extra, Unique, Ultimate] }
        level: { type: integer, minimum: 1 }
        element: { type: string, description: "Fire, Water, Space, Time, Mind..." }
        costMp: { type: integer, minimum: 0 }
        effect: { type: string }
        canon: { type: boolean, default: false }
        prerequisites:
          type: array
          items: { type: string }

    Race:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        family:
          type: string
          description: "Famille de race (dragon, slime, vampire, oni, goblin, demon, spirit, humanoid, beast, undead, celestial)"
        rank:
          type: string
          description: "Rang intra-famille (ex. dragons: lesser, medium, arch)"
        tier: { type: string, description: "Catégorie générale si utile" }
        canon: { type: boolean, default: true }
        description: { type: string }
        baseStats:
          type: object
          properties:
            hp: { type: integer }
            mp: { type: integer }
            strength: { type: integer }
            defense: { type: integer }
            magic: { type: integer }
            speed: { type: integer }
            resistance: { type: integer }
            charisma: { type: integer }
        evolutionPaths:
          type: array
          items: { $ref: '#/components/schemas/EvolutionPath' }
        tags:
          type: array
          items: { type: string }
          description: "Étiquettes utiles (p.ex. 'false-dragon')."

    EvolutionPath:
      type: object
      properties:
        toRaceId: { type: string }
        minLevel: { type: integer }
        conditions:
          type: array
          items: { type: string }
          description: "Conditions libres (nomination, rituels, magicules, etc.)"
        requiresTitleIds:
          type: array
          items: { type: string }
          description: "Titres requis (ex. element-dragon, dragon-lord)."
        requiresTranscendenceId:
          type: string
          description: "Transcendance requise, si applicable."
        notes: { type: string }

    EvolutionRequest:
      type: object
      properties:
        targetRaceId: { type: string }
        justification: { type: string }
        usedTitleIds:
          type: array
          items: { type: string }
      required: [targetRaceId]

    Title:
      type: object
      properties:
        id: { type: string, example: "element-dragon" }
        name: { type: string, example: "Element Dragon" }
        category:
          type: string
          enum: [element, lord, unique, divine, racial, custom]
          description: "Catégorie du titre (ex. element, lord)."
        appliesToFamilies:
          type: array
          items: { type: string }
          description: "Familles de races auxquelles ce titre peut s’appliquer."
        effects:
          type: array
          items: { type: string }
        conditions:
          type: array
          items: { type: string }
          description: "Prérequis (niveau, skill, événement...)."

    Transcendence:
      type: object
      properties:
        id: { type: string, example: "ultimate-slime" }
        name: { type: string, example: "Ultimate Slime" }
        appliesToFamilies:
          type: array
          items: { type: string }
          example: ["slime","dragon","vampire","oni"]
        statMultipliers:
          type: object
          additionalProperties: { type: number }
          description: "Multiplicateurs de stats (ex. magic: 1.5)"
        bonuses:
          type: array
          items: { type: string }
        conditions:
          type: array
          items: { type: string }
          description: "Conditions d’accès (rituels, titres, événements)."
        notes: { type: string }

    TranscendenceRequest:
      type: object
      properties:
        transcendenceId: { type: string }
        justification: { type: string }
      required: [transcendenceId]

    AwardXpRequest:
      type: object
      properties:
        xp: { type: integer, minimum: 1 }
      required: [xp]

    LevelUpResult:
      type: object
      properties:
        oldLevel: { type: integer }
        newLevel: { type: integer }
        xp: { type: integer }
        xpToNext: { type: integer }
        statIncreases:
          type: object
          additionalProperties: { type: integer }

    StoryState:
      type: object
      properties:
        currentLocation: { type: string }
        currentZoneId: { type: string }
        charactersInScene:
          type: array
          items: { type: string }
        recentEvents:
          type: array
          items: { type: string }
        discoveredZones:
          type: array
          items: { type: string }
        worldState:
          type: object
          additionalProperties: true

    RollRequest:
      type: object
      properties:
        dice:
          type: string
          description: "Formule NdM±K (ex. 1d20+3)"
      required: [dice]

    RollResult:
      type: object
      properties:
        result: { type: integer }
        rolls:
          type: array
          items: { type: integer }
        modifier: { type: integer }
        formula: { type: string }

    Zone:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string, description: "city, forest, nation, dungeon, ruin, spirit-realm…" }
        status: { type: string, enum: [canon, unused, custom] }
        description: { type: string }
        connections:
          type: array
          items: { type: string }
        factions:
          type: array
          items: { type: string }
        npcsPresent:
          type: array
          items: { type: string }
        discovered: { type: boolean, default: false }
        notes:
          type: array
          items: { type: string }

